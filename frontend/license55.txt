import tkinter as tk
from CTkMessagebox import CTkMessagebox
import requests
from login_gui import LoginGUI
from PIL import Image, ImageTk, ImageDraw
import customtkinter as ctk
import math
import tkinter.messagebox as tkmb  # at the top of your file



import os

API_URL = "http://127.0.0.1:8000/license"


class LicenseGUI(tk.Toplevel):
    def __init__(self, master):
        super().__init__(master)
        self.master = master
        self.title("HEMS License Portal")
        self.state('zoomed')
        self.configure(bg="#2C3E50")


        # Initialize containers
        self.bg_lines = []
        self.ribbon_stripes = []

        # Background Canvas - full screen
        self.bg_canvas = tk.Canvas(self, bg="#2C3E50", highlightthickness=0)
        self.bg_canvas.place(relx=0, rely=0, relwidth=1, relheight=1)

        # Ribbon Canvas - full screen (to allow bottom & top movement)
        self.ribbon_canvas = tk.Canvas(self, width=self.winfo_screenwidth(), height=self.winfo_screenheight(),
                                    highlightthickness=0, bd=0, bg="#2C3E50")
        self.ribbon_canvas.place(x=0, y=0, relwidth=1, relheight=1)

        # Create background lines and animated ribbons
        self.create_moving_background()
        self.animate_background()
        self.animate_ribbon()


        # Load and set icon
        self.set_icon()

        # Top Menu Bar
        self.create_top_menu()

        # Title and subtitle
        self.create_branding_labels()

        # Footer
        self.create_footer()

        # License content frame (initially empty)
        self.license_frame = tk.Frame(self, bg="#34495E", padx=40, pady=30)
        self.license_frame.place(relx=0.5, rely=0.5, anchor="center")
        

        # ðŸ‘‡ Show welcome screen at startup
        self.show_welcome_screen()

    def set_icon(self):
        icon_ico_path = os.path.abspath("frontend/icon.ico").replace("\\", "/")
        icon_png_path = os.path.abspath("frontend/icon.png").replace("\\", "/")
        if os.path.exists(icon_ico_path):
            self.iconbitmap(icon_ico_path)
        elif os.path.exists(icon_png_path):
            try:
                icon_img = Image.open(icon_png_path)
                icon_resized = icon_img.resize((80, 80))
                self.icon_image = ImageTk.PhotoImage(icon_resized)
                self.iconphoto(True, self.icon_image)
            except Exception as e:
                print(f"Error loading PNG icon: {e}")

    def create_top_menu(self):
        menu_frame = tk.Frame(self, bg="#1ABC9C", height=50)
        menu_frame.pack(fill="x", side="top")

        options = [
            ("Home", self.show_welcome_screen),  # ðŸ‘ˆ link to a new method
            ("Generate License Key", self.show_create_license),
            ("Verify Key", self.show_verify_key),
            ("Exit", self.destroy)
        ]




        for i, (text, command) in enumerate(options):
            btn = tk.Button(menu_frame, text=text, font=("Arial", 12, "bold"),
                            bg="#1ABC9C", fg="white", bd=0,
                            activebackground="#16A085", command=command)
            btn.pack(side="left", padx=20, pady=10)

            # Add hover color change
            def on_enter(e, b=btn):
                b.configure(bg="#16A085")

            def on_leave(e, b=btn):
                b.configure(bg="#1ABC9C")

            btn.bind("<Enter>", on_enter)
            btn.bind("<Leave>", on_leave)


        

    def create_branding_labels(self):
        ctk.CTkLabel(self, text="H     E     M     S",
                     font=ctk.CTkFont("Century Gothic", 38, "bold"),
                     text_color="white", fg_color="#2C3E50").place(relx=0.5, rely=0.15, anchor="center")

        ctk.CTkLabel(self, text="Hotel & Event Management System",
                     font=ctk.CTkFont("Century Gothic", 20, "bold"),
                     text_color="gold", fg_color="#2C3E50").place(relx=0.5, rely=0.22, anchor="center")

    def create_footer(self):
        tk.Label(self, text="Produced & Licensed by School of Accounting Package",
                 font=("Arial", 10, "italic"), fg="white", bg="#2C3E50").place(relx=0.8, rely=0.94, anchor="n")
        tk.Label(self, text="Â© 2025", font=("Arial", 10, "italic"),
                 fg="white", bg="#2C3E50").place(relx=0.85, rely=0.97, anchor="n")
        

    def show_welcome_screen(self):
        self.clear_license_frame()

        welcome_label = ctk.CTkLabel(
            self.license_frame,
            text="Welcome to License Manager",
            font=("Arial", 18, "bold"),
            text_color="white"
        )
        welcome_label.place(relx=0.5, rely=0.5, anchor="center")

        # Raise license_frame above the canvases
        self.license_frame.lift()  # Correct way to raise a Frame
        self.license_frame.tkraise()  # Redundant but ensures visibility



    def clear_license_frame(self):
        for widget in self.license_frame.winfo_children():
            widget.destroy()

    def show_create_license(self):
        self.clear_license_frame()
        
        self.add_label("Admin License Password:")
        self.password_entry = self.create_entry(show="*")  # ðŸ‘ˆ Hide characters

        self.add_label("License Key:")
        self.key_entry = self.create_entry()

        self.create_rounded_button("Generate License", self.generate_license)

    def show_verify_key(self):
        self.create_verify_license_form()


        self.ribbon_canvas.master.tkraise(self.ribbon_canvas)
        self.license_frame.master.tkraise(self.license_frame)





    def create_moving_background(self):
        self.bg_lines.clear()
        self.ribbon_stripes.clear()

        width = self.winfo_screenwidth()
        height = self.winfo_screenheight()
        self.bg_canvas.delete("all")
        self.ribbon_canvas.delete("all")

        # Diagonal background lines (shortened to avoid covering bottom ribbons)
        for i in range(0, width + 300, 80):
            line = self.bg_canvas.create_line(
                i, 0, i - 200, height - 200,  # shorten here
                fill="#95A5A6", width=1
            )
            self.bg_lines.append(line)

        # Ribbon stripe parameters
        num_stripes = 5
        self.ribbon_width = 150
        self.ribbon_height = 50
        spacing = self.ribbon_width + 100

        # Top wave-shaped ribbon polygons
        for i in range(num_stripes):
            x = width + (i * spacing)
            y = int(height * 0.2) + i * 30

            stripe = self.ribbon_canvas.create_polygon(
                x, y,
                x + self.ribbon_width, y,
                x + self.ribbon_width - 30, y + self.ribbon_height,
                x - 30, y + self.ribbon_height,
                smooth=True, fill="#1ABC9C", outline=""
            )
            self.ribbon_stripes.append(stripe)

        # Bottom wave-shaped ribbon polygons
        for i in range(num_stripes):
            x = width + (i * spacing)
            y = int(height * 0.88) + (i * 10)

            stripe = self.ribbon_canvas.create_polygon(
                x, y,
                x + self.ribbon_width, y,
                x + self.ribbon_width - 30, y + self.ribbon_height,
                x - 30, y + self.ribbon_height,
                smooth=True, fill="#3498DB", outline=""
            )
            self.ribbon_stripes.append(stripe)

        self.ribbon_canvas.update()
        self.wave_phase = 0
        self.ribbon_speed = 3.5



    def animate_background(self):
        for line in self.bg_lines:
            self.bg_canvas.move(line, 0.8, 0)
            coords = self.bg_canvas.coords(line)
            if coords[0] > self.winfo_screenwidth():
                self.bg_canvas.move(line, -self.winfo_screenwidth() - 300, 0)
        self.after(33, self.animate_background)


    def animate_ribbon(self):
        half = len(self.ribbon_stripes) // 2
        screen_width = self.winfo_screenwidth()

        for i, stripe in enumerate(self.ribbon_stripes):
            self.ribbon_canvas.move(stripe, -self.ribbon_speed, 0)
            coords = self.ribbon_canvas.coords(stripe)

            if coords:
                if i < half:
                    dy = 3 * math.sin(self.wave_phase + coords[0] * 0.015)
                else:
                    dy = -3 * math.sin(self.wave_phase + coords[0] * 0.015)

                self.ribbon_canvas.move(stripe, 0, dy)

                if coords[0] + self.ribbon_width < 0:
                    self.ribbon_canvas.move(stripe, screen_width + self.ribbon_width, 0)

        self.wave_phase += 0.08
        self.after(40, self.animate_ribbon)



    def add_label(self, text):
        tk.Label(self.license_frame, text=text, font=("Arial", 12, "bold"),
                 fg="white", bg="#34495E").pack(padx=5, pady=(10, 2))

    def create_entry(self, show=None):
        entry = tk.Entry(self.license_frame, width=25, font=("Arial", 12),
                         bg="#ECF0F1", fg="black", show=show if show else "")
        entry.pack(padx=5, pady=5)
        return entry



    def generate_license(self):
        license_password = self.password_entry.get()
        key = self.key_entry.get()

        if not license_password or not key:
            CTkMessagebox(title="Input Error", message="Please enter both license password and key.", icon="cancel")
            return

        try:
            response = requests.post(
                f"{API_URL}/generate?license_password={license_password}&key={key}",
                headers={"Content-Type": "application/json"}
            )
            response.raise_for_status()
            new_license = response.json()
            CTkMessagebox(title="License Generated", message=f"New License Key: {new_license['key']}", icon="check")

            # Destroy only the popup frame, leaving the main LicenseGUI window visible
            self.license_frame.destroy()
            self.license_frame = None  # Optional, to indicate no popup active


        except requests.exceptions.RequestException as e:
            CTkMessagebox(title="Error", message="Invalid Password", icon="cancel")


    def create_verify_license_form(self):
        self.clear_license_frame()

        # Title
        title = ctk.CTkLabel(self.license_frame, text="Verify License Key", font=("Arial", 18, "bold"), text_color="white")
        title.pack(pady=20)

        # Entry for Key
        self.verify_key_entry = ctk.CTkEntry(self.license_frame, placeholder_text="Enter license key")
        self.verify_key_entry.pack(pady=10, ipady=5, ipadx=50)

        # Button to verify
        self.create_rounded_button("Verify Key", self.verify_license)




    def verify_license(self):
        key = self.verify_key_entry.get()
        if not key:
            CTkMessagebox(title="Input Error", message="Please enter a license key.", icon="cancel")
            return
        try:
            response = requests.get(f"{API_URL}/verify/{key}")
            response.raise_for_status()
            result = response.json()

            if result.get("valid"):
                msg = CTkMessagebox(
                    title="License Valid",
                    message="The license key is valid!",
                    icon="check",
                    option_1="OK"
                )
                if msg.get() == "OK":
                    self.destroy()
                    login_window = tk.Toplevel(self.master)
                    LoginGUI(login_window)
            else:
                CTkMessagebox(title="Invalid License", message=result.get("message", "Invalid license key."), icon="warning")

        except Exception as e:
            CTkMessagebox(title="Error",  message="Invalid license key.", icon="cancel")

    def create_rounded_button(self, text, command):
        button = ctk.CTkButton(self.license_frame, text=text,
                            command=command,
                            font=("Arial", 12, "bold"),
                            fg_color="#1ABC9C",
                            hover_color="#16A085",
                            text_color="white",
                            corner_radius=12,
                            width=180,
                            height=40)
        button.pack(pady=10)
        return button


    class RoundedButton(tk.Canvas):
        def __init__(self, parent, text, command=None, radius=12, padding=10,
                    color="#1ABC9C", hover_color="#16A085", text_color="white",
                    font=("Arial", 12, "bold"), border_color=None, border_width=0, **kwargs):
            width = 180
            height = 40
            super().__init__(parent, width=width, height=height,
                            bg=parent['bg'], highlightthickness=0, **kwargs)
            self.command = command
            self.radius = radius
            self.color = color
            self.hover_color = hover_color
            self.text_color = text_color
            self.text = text
            self.font = font
            self.border_color = border_color or color
            self.border_width = border_width
            self.padding = padding

            self.rect = None
            self.text_id = None

            self.draw_button()
            self.bind_events()

        def draw_button(self):
            self.delete("all")

            r = self.radius
            w = int(self["width"])
            h = int(self["height"])

            # Draw border
            if self.border_width > 0:
                self.create_round_rect(0, 0, w, h, r, fill=self.border_color, outline="")

            # Draw main button
            self.rect = self.create_round_rect(
                self.border_width, self.border_width,
                w - self.border_width, h - self.border_width,
                r, fill=self.color, outline="")

            # Add text
            self.text_id = self.create_text(
                w // 2, h // 2,
                text=self.text,
                fill=self.text_color,
                font=self.font
            )

        def create_round_rect(self, x1, y1, x2, y2, radius, **kwargs):
            points = [
                x1+radius, y1,
                x2-radius, y1,
                x2, y1,
                x2, y1+radius,
                x2, y2-radius,
                x2, y2,
                x2-radius, y2,
                x1+radius, y2,
                x1, y2,
                x1, y2-radius,
                x1, y1+radius,
                x1, y1
            ]
            return self.create_polygon(points, smooth=True, **kwargs)

        def bind_events(self):
            self.bind("<Enter>", self.on_hover)
            self.bind("<Leave>", self.on_leave)
            self.bind("<Button-1>", self.on_click)

        def on_hover(self, event):
            self.itemconfig(self.rect, fill=self.hover_color)

        def on_leave(self, event):
            self.itemconfig(self.rect, fill=self.color)

        def on_click(self, event):
            if self.command:
                self.command()



# Main Execution
root = tk.Tk()
root.withdraw()
license_splash = LicenseGUI(root)
root.mainloop()
